from .cbfs import *
from .physical_params import jr_max, alpha_max

###############################################################################
############################# Control Constraints #############################
###############################################################################
U1_MAX = jr_max
U2_MAX = alpha_max

###############################################################################
############################ CBF-CLF-QP Parameters ############################
###############################################################################
q0 = 1e-2
q1 = 1

nSols = 2

###############################################################################
################################## Functions ##################################
###############################################################################


def objective_accel_and_steering(u_nom):
    Q = np.diag(int(len(u_nom)/2) * [q0, q1])
    p = -2 * Q @ u_nom
    return Q, p


def objective_accel_only(u_nom, agent):
    Q = q0*np.eye(len(u_nom))
    Q[agent, agent] = Q[agent, agent] / 50.0
    p = -2 * Q @ u_nom
    return Q, p


###############################################################################
############################# General Parameters ##############################
###############################################################################
ERROR = -999*np.ones((nSols,))
