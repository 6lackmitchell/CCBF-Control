from bicycle.controllers.cbfs.interagent_cbfs import *
from bicycle.dynamics.second_order_deterministic.physical_params import ar_max, w_max

###############################################################################
############################# Control Constraints #############################
###############################################################################
A_MAX = ar_max
W_MAX = w_max

###############################################################################
############################ CBF-CLF-QP Parameters ############################
###############################################################################
q0 = 1
q1 = 1e-2
q2 = 1
POWER = 1
kB = 1

nSols = 2

###############################################################################
################################## Functions ##################################
###############################################################################


def objective_accel_and_steering(u_nom):
    Q = np.diag(int(len(u_nom)/2) * [q0, q1])
    p = -2 * q0 * u_nom
    return Q, p


def objective_accel_only(u_nom, agent):
    Q = q0*np.eye(len(u_nom))
    Q[agent, agent] = Q[agent, agent] / 50.0
    p = -2 * q0 * u_nom
    return Q, p


###############################################################################
############################# General Parameters ##############################
###############################################################################
ERROR    = -999*np.ones((nSols,))